*tpipeline.txt*	Outsource your statusline to tmux
*tpipeline*

CONTENTS						*tpipeline-contents*

Introduction					|tpipeline-introduction|
Tmux Integration				|tpipeline-tmux|
Configuration					|tpipeline-configure|
Api						|tpipeline-api|

==============================================================================
INTRODUCTION						*tpipeline-introduction*

The |tpipeline| plugin embeds your vim statusline into your tmux statusline.
This plugin also comes with its own statusline that you can use independently
of the tmux functionality.

------------------------------------------------------------------------------
TMUX INTEGRATION					*tpipeline-tmux*

|tpipeline| creates a bridge to tmux as a file in the filesystem.
It will automatically embed itself in the tmux statusline.
However you need to put the following block in your tmux config:
>
	set -g focus-events on
	set -g status-style bg=default
	set -g status-left-length 90
	set -g status-right-length 90
	set -g status-justify centre
<

If you want to disable the automatic embed process for more control over how
the statusline is placed, see |g:tpipeline_autoembed|.

------------------------------------------------------------------------------
Configuration						*tpipeline-configure*

	g:tpipeline_statusline				*g:tpipeline_statusline*
		By default, |tpipeline| will copy your vim |statusline| but if
		you want to use a different statusline, set this variable
		instead.
>
			let g:tpipeline_statusline = '%!tpipeline#stl#line()'
			let g:tpipeline_statusline = '%f'
<

	g:tpipeline_split				*g:tpipeline_split*
		By default |tpipeline| will create separate files for the left
		and right part of your statusline.
		If you prefer to merge both parts of your statusline into one
		single chunk, then set `let g:tpipeline_split = 0`, and if you
		do not use the automatic embed process, you need to use the
		following tmux config:
>
			set -g focus-events on
			set -g status-style bg=default
			set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge)'
			set -g status-right-length 90
<

	g:tpipeline_focuslost				*g:tpipeline_focuslost*
		If you don't want to respond to `FocusLost` signals, set this
		variable using `let g:tpipeline_focuslost = 0`

	g:tpipeline_cursormoved				*g:tpipeline_cursormoved*
		If you want to have the statusline update while moving the
		cursor, use `let g:tpipeline_cursormoved = 1` which will set
		the |CursorMoved| autocmd.

	g:tpipeline_tabline				*g:tpipeline_tabline*
		By default if |g:tpipeline_statusline| is not set, the plugin
		will copy your |statusline|.
		If you instead want it to copy your |tabline| set this variable
		using `let g:tpipeline_tabline = 1`

	g:tpipeline_preservebg				*g:tpipeline_preservebg*
		By default the statusline will be prepended with a color
		definition such that the statusline in tmux reflects the colors
		of your vim statusline as defined in the |hl-StatusLine|
		highlight group.
		If you do not want to have this plugin mess with your tmux
		statusline color, you can disable this behaviour by setting
		`let g:tpipeline_preservebg = 1` but take in mind that in this
		case the embedded statusline will follow your tmux default
		colors and can in some cases even become invisible.

	g:tpipeline_fillcentre				*g:tpipeline_fillcentre*
		If you want to fill the space between the left and right part
		of the statusline with the last background color used in the
		left part, then set `let g:tpipeline_fillcentre = 1`, this
		option is off by default.

	g:tpipeline_autoembed				*g:tpipeline_autoembed*
		If this option is enabled (enabled by default), this plugin
		will automatically embed itself in tmux by replacing any
		previously configured statusline.
		You can disable this by using `let g:tpipeline_autoembed = 0`
		If you disable this you need to manually configure the embed
		process in your tmux config.
		This means something similar to the following tmux block:
>
			set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
			set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
			set -g focus-events on
			set -g status-style bg=default
			set -g status-left-length 90
			set -g status-right-length 90
			set -g status-justify centre
<
		Also see |g:tpipeline_embedopts| for a way to configure this
		without disabling autoembed completely.

	g:tpipeline_embedopts				*g:tpipeline_embedopts*
		If |g:tpipeline_autoembed| is enabled, this option will
		specify what options will be used when embedding the
		statusline in tmux.
		This must be an array of tmux options. Each option will be
		prepended with `'tmux set -g '` and then be executed in a shell.
		E.g. to only move the tmux window list to the middle, use:
		`let g:tpipeline_embedopts = ['status-justify absolute-centre']`

	g:tpipeline_clearstl				*g:tpipeline_clearstl*
		If you want this plugin to clear the vim internal statusline
		after loading, then set `let g:tpipeline_clearstl = 1`, this is
		disabled by default but can be useful to get rid of duplicate
		statuslines in split windows.
		By default vim shows the statusline below each split window,
		and there is no way to disable it completely. Thus this option
		can be used to at least show an empty statusline for split
		windows.
		Vim may still display filler symbols in the split statusline
		even if it is empty. See |fillchars| for more info about this.
		This option does not affect the statusline embedded in tmux.

	g:tpipeline_restore				*g:tpipeline_restore*
		When this option is enabled with `let g:tpipeline_restore = 1`
		it will restore the tmux statusline to its previous state
		after quitting vim. This feature is disabled by default.

	g:tpipeline_usepane				*g:tpipeline_usepane*
		By default |tpipeline| embeds your vim statusline into your
		tmux status bar. Enabling this option will set the tmux
		`pane_title` variable to your vim statusline, effectively
		embedding the statusline into your active pane border provided
		`pane-border-status` and `pane-border-format` are set
		accordingly. For example:
>
			set -g pane-border-status top
			set -g pane-border-format '#{pane_title}'
<

------------------------------------------------------------------------------
Api							*tpipeline-api*

	tpipeline#update()				*tpipeline#update()*
		This hook provides a way to update the tmux statusline from the
		outside.

	tpipeline#state#freeze()			*tpipeline#state#freeze()*
		Disables all updates of the tmux statusline until you call
		|tpipeline#state#thaw()|.

	tpipeline#state#thaw()				*tpipeline#state#thaw()*
		Reenables all updates of the tmux statusline after they were
		disabled using |tpipeline#state#freeze()|.

==============================================================================
	vim:tw=78:sw=4:ts=8:ft=help:norl:noet:
